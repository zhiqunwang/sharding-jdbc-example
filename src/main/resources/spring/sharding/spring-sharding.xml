<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:rdb="http://www.dangdang.com/schema/ddframe/rdb"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.dangdang.com/schema/ddframe/rdb
        http://www.dangdang.com/schema/ddframe/rdb/rdb.xsd">

	<context:component-scan base-package="org.elvis.wang" />
	<!--增加此配置 即可识别inline表达式-->
	<context:property-placeholder  ignore-unresolvable="true"/>

	<!-- 定义读写分离数据源, 读写分离数据源实现了DataSource接口, 可直接当做数据源处理,单独配置此项实现不了读写分离，需<rdb:data-source></rdb:data-source> 配合使用 -->
	<rdb:master-slave-data-source id="dbtbl_0" master-data-source-ref="sharding_1_mater" slave-data-sources-ref="sharding_1_slave" strategy-type="ROUND_ROBIN" />

	<!--对于微服务来说 已经根据业务进行的拆分库,对于单个表的水平分库显得没有必要，而且会引入分布式事务问题，故demo只进行分表,分库配置可参考具体官方文档-->
	<!--<rdb:master-slave-data-source id="dbtbl_1" master-data-source-ref="sharding_2_mater" slave-data-sources-ref="sharding_2_slave" strategy-type="ROUND_ROBIN" />-->

	<!-- 通过rdb:strategy设置分库规则-->
	<rdb:strategy id="databaseStrategy" sharding-columns="none" algorithm-expression="dbtbl_0"/>
	<!--多字段分表规则-->
	<rdb:strategy id="orderTableStrategy"  sharding-columns="order_id,create_time" algorithm-class="org.elvis.wang.service.impl.OrderMultipleKeysModuloTableShardingAlgorithm"/>

	<rdb:data-source id="shardingDataSource">
		<rdb:sharding-rule data-sources="dbtbl_0">
			<rdb:table-rules>
				<rdb:table-rule logic-table="t_order" actual-tables="t_order,t_order_${0..2}" database-strategy="databaseStrategy" table-strategy="orderTableStrategy"/>
			</rdb:table-rules>
			<rdb:default-database-strategy sharding-columns="none" algorithm-class="com.dangdang.ddframe.rdb.sharding.api.strategy.database.NoneDatabaseShardingAlgorithm"/>
			<rdb:default-table-strategy sharding-columns="none" algorithm-class="com.dangdang.ddframe.rdb.sharding.api.strategy.table.NoneTableShardingAlgorithm"/>
		</rdb:sharding-rule>
		<rdb:props>
			<prop key="sql.show">true</prop>
		</rdb:props>
	</rdb:data-source>


	<!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="shardingDataSource"/>
		<property name="mapperLocations" value="classpath*:mapper/*.xml"/>
		<!--<property name="configLocation" value="classpath:spring/sharding/mybatis-config.xml"></property>-->
		<property name="plugins">
			<array>
				<bean class="org.elvis.wang.mybatis.page.interceptor.PageInterceptor" />
				<bean class="org.elvis.wang.mybatis.page.interceptor.PageSqlRewriteInterceptor">
					<property name="dialect" value="mysql" />
				</bean>
			</array>
		</property>
	</bean>

	<!-- 事务 -->
	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="shardingDataSource" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- 配置自动扫描指定包下的Mapper接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="org.elvis.wang.dal.dao"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>



</beans>
